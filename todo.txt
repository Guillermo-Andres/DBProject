1. Register as a system administrator.
2. Register as a person in need of resources.
3. Register as a person that supplies resources.
4. Add a request for a given resource
5. Announce the availability of a resource.
6. Reserve or purchase a resource. Free resources are reserved. Otherwise, they are purchased.
7. Browse resources being requested
8. Browse resources available
9. See detail of resources, including location on a Google Map
10. Keyword search resources being requested, with sorting by resource name
11. Keyword search resources available, with sorting by resource name
12. Show dashboard page with daily statistics on a. Resources in need b. Resources available c. Matching between need and availability
13. Show dashboard page with trending statics (7 day period) on a. Resources in need b. Resources available c. Matching between need and availability
14. Show dashboard page with trending statics (8 Senate Regions in PR) on a. Resources in need b. Resources available c. Matching between need and availability





routes:
# This function will merge two subarrays in a single sorted subarray
def merge(arr, temp_arr, left, mid, right):
    L = left     # Starting index of left subarray
    R = mid + 1 # Starting index of right subarray
    sorted = left     # Starting index of to be sorted subarray
    inversions = 0

    #We need to count the inversions in each of the given sub arrays by using the indexes
    #We go one by one in each sub array combining the sorted L and R while taking into account the times an inversion occured
    while L <= mid and R <= right:
        # verify inversions
        if arr[L] <= arr[R]:
            temp_arr[sorted] = arr[L]
            sorted += 1
            L += 1
        else:
            temp_arr[sorted] = arr[R]
            inversions += (mid-L + 1)
            sorted += 1
            R += 1

    # Copy the remaining elements of left subarray into temporary array
    while L <= mid:
        temp_arr[sorted] = arr[L]
        sorted += 1
        L += 1

    # Copy the remaining elements of right subarray into temporary array
    while R <= right:
        temp_arr[sorted] = arr[R]
        sorted += 1
        R+= 1




    return  inversions









    def merge(arr, temp_arr, left, mid, right):
        i = left     # Starting index of left subarray
        j = mid + 1 # Starting index of right subarray
        k = left     # Starting index of to be sorted subarray
        inv_count = 0

        # Conditions are checked to make sure that i and j don't exceed their
        # subarray limits.

        while i <= mid and j <= right:

            # There will be no inversion if arr[i] <= arr[j]

            if arr[i] <= arr[j]:
                temp_arr[k] = arr[i]
                k += 1
                i += 1
            else:
                # Inversion will occur.
                temp_arr[k] = arr[j]
                inv_count += (mid-i + 1)
                k += 1
                j += 1

        # Copy the remaining elements of left subarray into temporary array
        while i <= mid:
            temp_arr[k] = arr[i]
            k += 1
            i += 1

        # Copy the remaining elements of right subarray into temporary array
        while j <= right:
            temp_arr[k] = arr[j]
            k += 1
            j += 1

        # Copy the sorted subarray into Original array
        for loop_var in range(left, right + 1):
            arr[loop_var] = temp_arr[loop_var]

        return inv_count



8.) almacenespr/available/  GET de resource
9.)almacenespr/resource<type>/resource<id> (todos los attributos de a given reource) mis tablas esta hechas
10.)almacenespr/requested/resource<type>/search<keyword>
11.)almacenespr/available/resource<type> /search<keyword>
    *19 cases cada uno con sus varios key words
    *todos los handlers de los recursos






Rest methods API

4.)POST de ORDER
5.) POST de resource , PUT de order
6.)POST de  ORDER
7.) GET de order
8.) GET de resource
9.)GET de resource
10.)GET  de order
11.) get resource
12.) get resources y order by date
13.)get resources y order by date
14.) get resources y order by location
